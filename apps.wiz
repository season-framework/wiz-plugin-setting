[{"dic":{"default":{}},"id":"core.setting.acl","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Access Control\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define access control for access wiz admin interface.\n                                .text-muted you can use `framework` (flask app object) in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.wiz.acl\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/acl","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.after_request","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title After Request\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define process after request.\n                                .text-muted you can use `response` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.after_request\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/after_request","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.build_resource","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Build Resource\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define compile or trigger when resource download.\n                                .text-muted you can use `resource_dirpath`, `resource_filepath` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.build_resource\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/build_resource","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.configuration","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: calc(100% - 112px);\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title Configuration\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Configuration about WIZ Framework.\n                                .text-muted you can set default theme, categories, menus.\n\n                        .info-form.row.first-child\n                            .col-md-4 \n                                h4.mb-0 Default Theme\n                                span.text-muted If WIZ Interface not setup theme, use this default theme.\n                            .col-md-8.pt-3\n                                select.form-select.text-center(ng-model=\"data.wiz.theme.default\")\n                                    option(value='{{theme}}' ng-repeat=\"theme in themes\") {{theme}}\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Category\n                                span.text-muted Interface category. Seperated by line. Each lines defined as 'key: displayname'.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=5 ng-model=\"data.wiz.category\" placeholder=\"route: Route\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Top Menu\n                                span.text-muted WIZ Admin interface's top menu list. Septerated by line.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=5 ng-model=\"data.wiz.topmenus\" placeholder=\"HOME: /\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Read File Support\n                                span.text-muted Support filetype for read file as code in theme/model/resources directory.\n                            .col-md-8.text-center\n                                textarea.form-control(rows=10 ng-model=\"data.wiz.supportfile\" placeholder=\".py: python\")\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/configuration","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.installer","name":"/install","compile_html":"on","compile_css":"off","compile_js":"on","api":"","html":".container-tight.p-4.mt-6(style=\"{{step.wide ? 'max-width: 920px;' : ''}}\")\n    .text-center.mb-4\n        a(href=\".\")\n            table(style='color: #0b195f; cursor: pointer; margin: 0 auto;')\n                tr\n                    td.p-3.pb-0.pt-1.pr-1\n                        img(src='/resources/wiz/plugin/theme/img/wiz-font-black.png' style='height: 18px; margin-top: 12px;')\n                        img(src='/resources/wiz/plugin/theme/img/logo-sym.png' style='height: 28px; margin-left: 8px;')\n                    td\n                        h3.m-0.p-0(style=\"margin-top: 24px !important;\") Easy Install\n\n    .card.card-md(ng-if=\"step.id == 'start'\")\n        .card-body.text-center.p-4.p-sm-5\n            p.text-muted WIZ is not installed on the server. Click the Next button to proceed with the installation.\n\n    .card.card-md(ng-if=\"step.id == 'framework.default'\")\n        .card-body.text-center.p-3\n            h2 Framework Setting\n        .hr.my-0\n        .card-body\n            .mb-3\n                label.form-label.bold Host\n                .form-hint Development server host. Defaults to '0.0.0.0'.\n                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.host\" placeholder=\"0.0.0.0\")\n            \n            .mb-3\n                label.form-label.bold Port\n                .form-hint Development server port. Default to '3000'.\n                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.port\" placeholder=\"3000\")\n            \n            .mb-3\n                label.form-label.bold Session secret\n                .form-hint Session secret key for flask app. Default to 'season-wiz'.\n                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.secret_key\" placeholder=\"season-wiz\")\n\n            .mb-3\n                label.form-label.bold Log Level\n                .form-hint If you don’t configure logging, default log level is usually ‘warning’.\n                select.form-select.text-center(ng-model=\"data.framework.log_level\")\n                    option(value=0) DEBUG\n                    option(value=1) INFO\n                    option(value=2) DEV\n                    option(value=3) WARNING\n                    option(value=4) ERROR\n                    option(value=5) CRITICAL\n\n    .card.card-md(ng-if=\"step.id == 'wiz.category'\")\n        .card-body.text-center.p-3\n            h2 WIZ Configurations\n        .hr.my-0\n        .card-body\n            .mb-3\n                label.form-label.bold Category\n                .form-hint\n                    div WIZ App categories. Seperated by line. \n                    div Each lines defined as 'key: displayname'.\n                textarea.form-control(rows=5 ng-model=\"data.wiz.category\" placeholder=\"route: Route\")\n\n            .mb-3\n                label.form-label.bold Menus\n                .form-hint\n                    div WIZ Admin interface's top menu list.\n                    div Septerated by line.\n                textarea.form-control(rows=5 ng-model=\"data.wiz.topmenus\" placeholder=\"HOME: /\")\n\n            .mb-3\n                label.form-label.bold Read File Support\n                .form-hint Support filetype for read file as code in theme/model/resources directory.\n                textarea.form-control(rows=10 ng-model=\"data.wiz.supportfile\" placeholder=\".py: python\")\n\n    .card.card-md(ng-if=\"step.id == 'wiz.acl'\")\n        .card-body.text-center.p-3\n            h2 WIZ Configurations\n        .hr.my-0\n        .card-body\n            .mb-3\n                label.form-label.mb-3.bold Access Control\n                .form-hint.mb-3 \n                    div Define access control for access wiz admin interface.\n                    div you can use `framework` (flask app object) in code area.\n                div(style=\"height: 400px; overflow: hidden;\")\n                    div(ng-model=\"data.wiz.acl\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n    .row.align-items-center.mt-3\n        .col-4\n            .progress\n                .progress-bar(style=\"width: {{step_index * 100 / steps.length}}%\" role=\"progressbar\" aria-valuenow=\"{{step_index * 100 / steps.length}}\" aria-valuemin=\"0\" aria-valuemax=\"100\")\n        .col\n            .btn-list.justify-content-end\n                button.btn.btn-light(ng-click=\"event.prev()\" ng-if=\"!isfirst\")\n                    | Prev\n                button.btn.btn-dark(ng-click=\"event.next()\" ng-if=\"!islast\")\n                    | Next\n                button.btn.btn-dark(ng-click=\"event.build()\" ng-if=\"islast\")\n                    | Finish","js":"let wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.data = wiz.data.wizpackage;\n\n    var steps = [];\n    steps.push({ id: \"start\" });\n    steps.push({ id: \"framework.default\", });\n    steps.push({ id: \"wiz.category\" });\n    steps.push({ id: \"wiz.acl\", wide: true });\n\n    $scope.steps = steps;\n    $scope.step = $scope.steps[0];\n    $scope.step_index = 1;\n\n    $scope.islast = false;\n    $scope.isfirst = true;\n\n    $scope.event = {};\n    $scope.event.next = function () {\n        var current_index = $scope.steps.indexOf($scope.step);\n        current_index = current_index + 1;\n        if (current_index > $scope.steps.length - 1) return;\n        if (current_index == $scope.steps.length - 1) $scope.islast = true;\n        $scope.isfirst = false;\n        $scope.step = $scope.steps[current_index];\n        $scope.step_index = current_index + 1;\n        $timeout();\n    }\n\n    $scope.event.prev = function () {\n        var current_index = $scope.steps.indexOf($scope.step);\n        current_index = current_index - 1;\n        if (current_index < 0) return;\n        if (current_index == 0) $scope.isfirst = true;\n        $scope.islast = false;\n        $scope.step = $scope.steps[current_index];\n        $scope.step_index = current_index + 1;\n        $timeout();\n    }\n\n    $scope.event.build = function () {\n        var pd = angular.copy($scope.data);\n        pd = JSON.stringify(pd);\n        $.post(\"/wiz/install/build\", { data: pd }, function (res) {\n            $timeout(function () {\n                location.href = window.location.protocol + \"//\" + window.location.hostname + \":\" + $scope.data.framework.port + \"/wiz\";\n            }, 3000);\n        });\n    }\n\n}","controller":"kwargs['wizpackage'] = framework.model(\"config\").get()\nkwargs['request_ip'] = framework.request.client_ip()","css":"body {\n    background-color: #f5f7fb !important;\n}"},{"dic":{"default":{}},"id":"core.setting.onboot","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title On Boot\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define wiz framework on start.\n                                .text-muted you can use `app` (flask app), `socketio` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.build\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/onboot","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.onerror","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title On Error\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted Define error handler.\n                                .text-muted you can use `wiz` instance in code area.\n                        \n                        .info-form.row.first-child\n                            .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n                                div(ng-model=\"data.framework.on_error\" ui-monaco-opts=\"monaco_properties\" ui-monaco)\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/onerror","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.setting.plugin.browser","name":"/plugin/browser","compile_html":"on","compile_css":"off","compile_js":"on","controller":"wiz = framework.model(\"wiz\")\n\nplugin_id = framework.request.segment.plugin_id\ntarget = framework.request.segment.target\n\nif plugin_id is None:\n    framework.response.send(\"\")\nif target is None:\n    framework.response.send(\"\")\n\nfs = framework.model(\"wizfs\").use(f\"wiz/plugin/{plugin_id}\")\nif fs.isdir(target) == False:\n    fs.makedirs(target)\n\nTARGET_PATH = fs.abspath()\nkwargs[\"TARGET_PATH\"] = f\"wiz/plugin/{plugin_id}\"\nkwargs[\"TARGET\"] = target\n","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(3) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(3) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(3) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: 100%; max-width: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}","js":"const TARGET_PATH = wiz.data.TARGET_PATH;\nconst TARGET = wiz.data.TARGET;\n\nconst API_URL = \"/wiz/admin/api/file\";\nconst LOCALSTORAGEID = \"season.wiz.plugin.resources.properties\";\nconst TREE_DATA = [\n    { path: TARGET_PATH, name: TARGET, type: 'folder', icon: 'fa-layer-group', display: TARGET }\n];\nconst VIEWER_IMAGE_URL = (item) => {\n    let url = item.url;\n    url = url.split(\"/\");\n    let plugin_id = url[2];\n    url = url.splice(4);\n    url = url.join(\"/\");\n    url = \"/resources/wiz/plugin/\" + plugin_id + \"/\" + url;\n    return url;\n};\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","api":""},{"dic":{"default":{}},"id":"core.setting.plugin.editor","name":"/plugin/editor","compile_html":"on","compile_css":"off","compile_js":"on","controller":"model = framework.model(\"plugin\")\n\nplugin_id = framework.request.segment.plugin_id\n\nif plugin_id is None:\n    framework.response.redirect(\"plugin/list\")\n\nplugin = model.get(plugin_id)\n\nif plugin is None:\n    framework.response.redirect(\"plugin/list\")\n\nkwargs[\"PLUGIN_ID\"] = plugin_id\n","api":"plugin = framework.model(\"plugin\")\n\ndef info(framework):\n    plugin_id = framework.request.segment.get(0, True)\n    info = plugin.get(plugin_id)\n    if info is None:\n        framework.response.status(404)\n    framework.response.status(200, info)\n    \ndef update(framework):\n    plugin_id = framework.request.segment.get(0, True)\n    info = framework.request.query(\"info\", True)\n    apps = framework.request.query(\"apps\", True)\n    route = framework.request.query(\"route\", True)\n\n    status = plugin.update(plugin_id, info, apps, route)\n\n    if status:\n        framework.response.status(200)\n    framework.response.status(500)\n\ndef delete(framework):\n    plugin_id = framework.request.segment.get(0, True)\n    plugin.delete(plugin_id)\n    framework.response.status(200)\n","html":"div(style=\"width: 100%; height: 100%;\")\n    mixin editor_tab_1()\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Plugin ID\n                input.form-control(type='text' placeholder='wiz.workspace' ng-model=\"data.info.id\" autocomplete='off' disabled)\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Plugin Name\n                input.form-control(type='text' placeholder='Plugin Name' ng-model=\"data.info.name\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Plugin Version\n                input.form-control(type='text' placeholder='0.1.0' ng-model=\"data.info.version\" autocomplete='off')\n        \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Route\n                .input-group\n                    span.input-group-text /wiz/admin/\n                    input.form-control(type='text' placeholder='workspace' ng-model=\"data.info.route\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Plugin Config\n                select.form-select(ng-model=\"data.info.config\")\n                    option(value=\"\") Not Support\n                    option(value=\"{{app.id}}\" ng-repeat=\"app in data.apps\") {{app.id}}\n            \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Description\n                textarea.form-control(rows=5 type='text' ng-model=\"data.info.description\" autocomplete='off')\n\n        .hr.bg-white\n\n        h3.text-white Author Info.\n            \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Author Name\n                input.form-control(type='text' placeholder='SEASON' ng-model=\"data.info.author_name\" autocomplete='off')\n        \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Author Email\n                input.form-control(type='text' placeholder='contact@season.co.kr' ng-model=\"data.info.author_email\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Author Icon\n                input.form-control(type='text' placeholder='https://' ng-model=\"data.info.author_icon\" autocomplete='off')\n\n\n    mixin editor_tab_2()\n        div(ng-if=\"app.data\")\n            .card.card-sm.mb-3\n                .card-body\n                    label.form-label(style=\"font-family: 'MAIN-EB'\") Plugin ID\n                    input.form-control(type='text' placeholder='wiz.workspace' ng-model=\"data.info.id\" autocomplete='off' disabled)\n\n            .card.card-sm.mb-3\n                .card-body\n                    label.form-label(style=\"font-family: 'MAIN-EB'\") App ID\n                    input.form-control(type='text' placeholder='package.namespace' ng-model=\"app.data.id\" autocomplete='off')\n            \n            .card.card-sm.mb-3\n                .card-body\n                    label.form-label(style=\"font-family: 'MAIN-EB'\") Title\n                    input.form-control(type='text' placeholder='App Title' ng-model=\"app.data.name\" autocomplete='off')\n\n            .card.card-sm.mb-3\n                .card-body\n                    label.form-label(style=\"font-family: 'MAIN-EB'\") Compile\n\n                    .row \n                        .col-md-4\n                            label.form-label(style=\"font-family: 'MAIN-EB'\") HTML\n                            select.form-select(ng-model=\"app.data.compile_html\")\n                                option(value=\"off\") OFF\n                                option(value=\"on\") ON\n                        .col-md-4\n                            label.form-label(style=\"font-family: 'MAIN-EB'\") CSS\n                            select.form-select(ng-model=\"app.data.compile_css\")\n                                option(value=\"off\") OFF\n                                option(value=\"on\") ON\n                        .col-md-4\n                            label.form-label(style=\"font-family: 'MAIN-EB'\") JS\n                            select.form-select(ng-model=\"app.data.compile_js\")\n                                option(value=\"off\") OFF\n                                option(value=\"on\") ON\n\n            .hr.bg-white\n        \n        h3.text-white Components\n        \n        .tree-container\n            .root-tree.mb-1(ng-repeat=\"item in data.apps\" class=\"{{item.id == app.data.id ? 'active' : ''}}\" ng-click=\"browse.select(item)\" ng-if=\"!item.hide\")\n                .root-title\n                    table\n                        tr \n                            td.w-1(style=\"vertical-align: top;\")\n                                i.fas.fa-code.mr-2\n                            td(style=\"line-height: 1;\")\n                                span {{item.name}}\n                                br\n                                span.namespace {{item.id}}\n                            \n            a.root-tree.mb-1(ng-click=\"app.create()\")\n                .root-title.text-center.p-1.text-white\n                    i.fas.fa-plus.mr-2 \n                    span Add New App\n\n\n    mixin editor_tab_3()\n        .tree-container\n            .root-tree.mb-1(ng-repeat=\"item in files.menus\" class=\"{{item.id == files.data.id ? 'active' : ''}}\" ng-click=\"files.select(item)\")\n                .root-title\n                    table\n                        tr \n                            td.w-1(style=\"vertical-align: top;\")\n                                i.fas.fa-code.mr-2\n                            td(style=\"line-height: 1;\")\n                                span {{item.name}}\n\n    mixin codearea_tab_1(tab)\n        div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('{$tab$}')\" ng-if=\"app.config.viewstate && layout.accessable_tab.includes('{$tab$}') && workspace.active_workspace == workspace.list[0].id\" ng-cloak)\n            .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in app.config.code.list\" ng-click=\"app.config.code.change('{$tab$}', code.id)\" ng-class=\"configuration.tab.{$tab$}_val == code.id ? 'btn-white' : 'btn-dark'\") {{code.name}}\n\n                select.form-select.form-select-sm.m-1.mr-0.ml-auto(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" style=\"width: 60px;\" ng-model=\"configuration.tab.{$tab$}_language\")\n                    option(ng-repeat=\"(key, value) in app.data.dic\" value=\"{{key}}\") {{key}}\n                .btn.btn-square.btn-dark.btn-sm.p-2(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-click=\"modal.add_language()\")\n                    i.fas.fa-plus\n\n            div(style=\"height: calc(100% - 36px);\")\n                div(ng-if=\"['preview', 'dic'].includes(configuration.tab.{$tab$}_val) == false && workspace.active_workspace == workspace.list[0].id\" ng-model=\"data.route[configuration.tab.{$tab$}_val]\" ui-monaco-opts=\"app.config.properties['{$tab$}']\" ui-monaco)\n\n                div(ng-if=\"configuration.tab.{$tab$}_val == 'preview'\")\n                    .input-group.input-group-sm(style=\"border-radius: 0;\")\n                        span.input-group-text(style=\"border-radius: 0;\")\n                            i.fas.fa-compass\n                        input.form-control.form-control-sm(type=\"text\" style=\"border-radius: 0;\" placeholder=\"/route/test\" ng-model=\"app.config.url\" ng-enter=\"app.preview()\")\n                        button.btn.btn-dark(style=\"border-radius: 0; min-width: 60px;\" ng-click=\"app.preview()\")\n                            i.fas.fa-location-arrow\n\n                .code-preview(ng-if=\"configuration.tab.{$tab$}_val == 'preview'\" style=\"max-width: none; width: 100%; height: calc(100% - 28px);\")\n                    iframe.preview(style=\"height: 100%;\" ng-show=\"app.preview.status\")\n                    table(ng-if=\"!app.preview.status\" style=\"width: 100%; height: 100%;\")\n                        tr \n                            td(style=\"text-align: center; vertical-align: middle;\")\n                                .spinner-grow.text-dark(style=\"width: 120px; height: 120px;\")\n                div(ng-if=\"app.tab.activetab != '{$tab$}' && ['preview'].includes(configuration.tab.{$tab$}_val) == false\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; background: rgba(0,0,0,.05); z-index: 9999;\")\n\n    mixin codearea_tab_2(tab)\n        div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('{$tab$}')\" ng-if=\"app.editor.viewstate && layout.accessable_tab.includes('{$tab$}') && workspace.active_workspace == workspace.list[1].id && app.data\" ng-cloak)\n            .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in app.editor.code.list\" ng-click=\"app.editor.code.change('{$tab$}', code.id)\" ng-class=\"configuration.tab.{$tab$}_val == code.id ? 'btn-white' : 'btn-dark'\") {{code.name}}\n\n                select.form-select.form-select-sm.m-1.mr-0.ml-auto(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" style=\"width: 60px;\" ng-model=\"configuration.tab.{$tab$}_language\")\n                    option(ng-repeat=\"(key, value) in app.data.dic\" value=\"{{key}}\") {{key}}\n                .btn.btn-square.btn-dark.btn-sm.p-2(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-click=\"modal.add_language()\")\n                    i.fas.fa-plus\n\n            div(style=\"height: calc(100% - 36px);\")\n                div(ng-if=\"['preview', 'dic'].includes(configuration.tab.{$tab$}_val) == false && workspace.active_workspace == workspace.list[1].id\" ng-model=\"app.data[configuration.tab.{$tab$}_val]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n                div(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-model=\"app.data[configuration.tab.{$tab$}_val][configuration.tab.{$tab$}_language]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n\n                .code-preview(ng-if=\"configuration.tab.{$tab$}_val == 'preview'\" style=\"max-width: none; width: 100%; height: 100%;\")\n                    iframe.preview(style=\"height: 100%;\" ng-show=\"app.preview.status\")\n                    table(ng-if=\"!app.preview.status\" style=\"width: 100%; height: 100%;\")\n                        tr \n                            td(style=\"text-align: center; vertical-align: middle;\")\n                                .spinner-grow.text-dark(style=\"width: 120px; height: 120px;\")\n\n                div(ng-if=\"app.tab.activetab != '{$tab$}' && ['preview'].includes(configuration.tab.{$tab$}_val) == false\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; background: rgba(0,0,0,.05); z-index: 9999;\")\n\n\n    .display-none(style=\"display: none;\")\n        input#import-file(type=\"file\" accept=\".json,application/json\")\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n\n    .fixed-top\n        header.navbar.navbar-expand-md.navbar-dark\n            .container(style=\"max-width: none;\")\n                button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbar-menu')\n                    span.navbar-toggler-icon\n\n                .navbar-brand.navbar-brand-autodark.d-none-navbar-horizontal.pr-0.pr-md-3\n                    table(style='color: #d7e0fd; cursor: pointer;')\n                        tr\n                            td.p-3.pb-0.pt-1.pr-1\n                                img(src='/resources/wiz/plugin/theme/img/wiz-font.png' style='height: 18px; margin-top: 12px;')\n                                img(src='/resources/wiz/plugin/theme/img/logo-sym.png' style='height: 28px; margin-left: 8px;')\n                            td\n                                h3.m-0.p-0(style=\"margin-top: 24px !important;\") Plugin Editor\n\n                #navbar-menu.navbar.navbar-collapse.collapse\n                    ul.navbar-nav\n                    ul.navbar-nav.flex-row.order-md-last.mr-2(style=\"align-items: center;\")\n\n                        li.nav-item.p-0.pr-2\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 1 ? 'active' : ''\" ng-click=\"layout.change(1)\")\n                                .layout-icon\n                                    .layout-row\n                                        .layout-column\n                        li.nav-item.p-0.pr-2\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 2 ? 'active' : ''\" ng-click=\"layout.change(2)\")\n                                .layout-icon\n                                    .layout-row\n                                        .layout-column\n                                        .layout-column\n                        li.nav-item.p-0.pr-2\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 3 ? 'active' : ''\" ng-click=\"layout.change(3)\")\n                                .layout-icon\n                                    .layout-row\n                                        .layout-column\n                                        .layout-column\n                                        .layout-column\n                        \n                        li.nav-item.p-0.pr-2\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 4 ? 'active' : ''\" ng-click=\"layout.change(4)\")\n                                .layout-icon.rows-2\n                                    .layout-row\n                                        .layout-column\n                                    .layout-row\n                                        .layout-column\n                        li.nav-item.p-0.pr-2\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 5 ? 'active' : ''\" ng-click=\"layout.change(5)\")\n                                .layout-icon.rows-2\n                                    .layout-row\n                                        .layout-column\n                                        .layout-column\n                                    .layout-row\n                                        .layout-column\n                        li.nav-item.p-0\n                            .layout-selector.p-2(ng-class=\"layout.active_layout == 6 ? 'active' : ''\" ng-click=\"layout.change(6)\")\n                                .layout-icon.rows-2\n                                    .layout-row\n                                        .layout-column\n                                        .layout-column\n                                        .layout-column\n                                    .layout-row\n                                        .layout-column\n\n                    ul.navbar-nav.flex-row.order-md-last.mr-2(style=\"align-items: center;\")\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"modal.keymaps()\") \n                                i.fas.fa-keyboard.mr-2\n                                span.nav-link-title(style=\"font-size: 14px;\") Shortcuts\n\n                        li.nav-item.p-0.pr-2(ng-if=\"app.data && workspace.active_workspace == workspace.list[1].id\")\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.delete(app.data)\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Delete App\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"modal.delete()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Uninstall\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.save()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Save\n\n                        li.nav-item.p-0\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(href='/wiz/admin/setting/plugin/list')\n                                span.nav-link-title.bold(style=\"font-size: 14px;\")\n                                    i.fas.fa-times\n    \n    div(data-split-pane data-split-pane-properties=\"layout.viewstate.root\")\n        .bg-dark(data-split-pane-component data-width=\"360px\")\n            .menu-layout.p-3\n                .btn-group.w-100.mb-3\n                    button.btn(type=\"button\" ng-repeat=\"item in workspace.list\" style=\"width: 50%;\" class=\"{{workspace.active_workspace == item.id ? 'btn-white' : 'btn-dark'}}\" ng-click=\"item.active()\") {{item.name}}\n\n                div(ng-show=\"workspace.active_workspace == workspace.list[0].id\")\n                    +editor_tab_1\n\n                div(ng-show=\"workspace.active_workspace == workspace.list[1].id\")\n                    +editor_tab_2\n                \n                div(ng-show=\"workspace.active_workspace == workspace.list[2].id\")\n                    +editor_tab_3\n\n\n        div(data-split-pane-divider data-width=\"0px\")\n        \n        #editor-area(data-split-pane-component)\n            div(ng-show=\"workspace.active_workspace == workspace.list[2].id\" style=\"height: 100%;\")\n                iframe#file-browser(style=\"width: 100%; height: 100%;\")\n\n            div(ng-show=\"workspace.active_workspace == workspace.list[0].id || workspace.active_workspace == workspace.list[1].id\" style=\"height: 100%;\")\n                div(data-split-pane data-split-pane-properties=\"layout.viewstate.horizonal\")\n                    div(data-split-pane-component data-height=\"100%\")\n                        div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_1\")\n                            div(data-split-pane-component data-width=\"34%\")\n                                +codearea_tab_1('tab1')\n                                +codearea_tab_2('tab1')\n                            div(data-split-pane-divider data-width=\"3px\")\n                            div(data-split-pane-component data-width=\"66%\")\n                                div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_2\")\n                                    div(data-split-pane-component data-width=\"50%\")\n                                        +codearea_tab_1('tab2')\n                                        +codearea_tab_2('tab2')\n                                    div(data-split-pane-divider data-width=\"3px\")\n                                    div(data-split-pane-component data-width=\"50%\")\n                                        +codearea_tab_1('tab3')\n                                        +codearea_tab_2('tab3')\n\n                    div(data-split-pane-divider data-height=\"3px\")\n\n                    div(data-split-pane-component data-height=\"0\")\n                        div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('tab4')\" ng-cloak)\n                            .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                                a.btn.btn-square.btn-sm.p-2(href=\"\" ng-click=\"event.app.tabchange('tab4', 'debug')\" ng-class=\"configuration.tab.tab4_val == 'debug' ? 'btn-white' : 'btn-dark'\") DEBUG\n                                a.btn.btn-square.btn-dark.btn-sm.p-2.ml-auto(href=\"\" ng-if=\"configuration.tab.tab4_val == 'debug'\" ng-click=\"socket.clear()\") CLEAR\n                                button.btn.btn-square.btn-dark.btn-sm.p-2(ng-click=\"socket.link()\" ng-if=\"configuration.tab.tab4_val == 'debug'\")\n                                    i.fas.fa-external-link-square-alt\n                            div(style=\"height: calc(100% - 36px);\")\n                                .debug-messages(ng-if=\"configuration.tab.tab4_val == 'debug'\" style=\"overflow: auto; max-width: none; width: 100%; height: 100%; background: #000; color: #fff; padding: 8px; line-height: 1;\" ng-bind-html=\"trustAsHtml(socket.log)\")\n\n    #modal-add-language.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Add Language\n                    .p-4 \n                        input.form-control(type=\"text\" placeholder=\"ko\" ng-model=\"modal.add_language.lang\" autocomplete='off')\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-click=\"app.editor.code.dic.add(modal.add_language.lang)\") Add\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Uninstall\n                    div Are you sure you want to uninstall this plugin?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"app.uninstall()\") Uninstall\n\n    #modal-delete-file.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"framework.delete()\") Delete\n\n    #modal-keymaps.modal.fade(tabindex=\"-1\")\n        .modal-dialog(role='document' style=\"max-width: 720px;\")\n            .modal-content\n                .modal-header\n                    .modal-title Shortcuts\n                .modal-body.m-0\n                    table.table.table-bordered.table-hover \n                        thead \n                            th.text-center Shortcut\n                            th.text-center Description\n                        tbody\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Ctrl(CMD)\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark S\n                                td.text-center Save\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark Z, X\n                                td.text-center move previous/next tab\n                             tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark A, S\n                                td.text-center move previous/next code view\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark 1, 2, 3\n                                td.text-center Panel change (config/widget/framework)\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark J, K\n                                td.text-center Previous/Next wiz component\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark F\n                                td.text-center Find Widgets (in widgets tab)\n                            \n                .modal-footer\n                    button.btn.btn-link.link-secondary.ml-auto(type='button' data-dismiss='modal') Cancel","js":"const PLUGIN_ID = wiz.data.PLUGIN_ID;\nconst FILEMENUS = [\n    { 'name': 'Resources', 'id': 'resources' }\n];\n\nconst WORKSPACES = [\n    { id: 'config', name: 'Config' },\n    { id: 'component', name: 'Component' },\n    { id: 'files', name: 'Files' }\n]\n\nconst LOCALSTORAGEID = \"season.wiz.plugin.configuration\";\nconst APP_URL = \"/wiz/admin/setting/plugin/\";\nlet API_URL = wiz.API.url(\"\");\nAPI_URL = API_URL.substring(0, API_URL.length - 1);\n\nconst TABS = {\n    ROUTE: ['builder', 'route'],\n    APP: ['controller', 'api', 'html', 'js', 'css', 'dic']\n};\nconst CODELIST = {\n    ROUTE: [\n        { id: 'builder', name: 'Builder' },\n        { id: 'route', name: 'Route' },\n        { id: 'preview', name: 'Preview' }\n    ],\n    APP: [\n        { id: 'controller', name: 'Controller' },\n        { id: 'api', name: 'API' },\n        { id: 'html', name: 'HTML' },\n        { id: 'js', name: 'JS' },\n        { id: 'css', name: 'CSS' },\n        { id: 'dic', name: 'Dictionary' },\n        { id: 'preview', name: 'Preview' }\n    ]\n}\n\nlet PREVIEW_URL = async (app_id) => {\n    return APP_URL + \"preview/\" + PLUGIN_ID + \"/\" + app_id;\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    let BUILDER = {};\n\n    let API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        info: (plugin_id) => new Promise((resolve, reject) => {\n            let url = API_URL + '/info/' + plugin_id;\n            $.get(url, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            let plugin_id = data.info.id;\n            let url = API_URL + '/update/' + plugin_id;\n            $.post(url, { info: JSON.stringify(data.info), apps: JSON.stringify(data.apps), route: JSON.stringify(data.route) }, (res) => {\n                resolve(res);\n            });\n        }),\n        delete: (plugin_id) => new Promise((resolve, reject) => {\n            let url = API_URL + '/delete/' + plugin_id;\n            $.get(url, API.handler(resolve, reject));\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    /*\n     * define variables of scope\n     */\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.layout = {};              // controller for layout\n    $scope.workspace = {};           // controller for workspace\n    $scope.loading = {};             // controller for display loading\n    $scope.modal = {};               // controller for modal\n    $scope.plugin = {};              // manage plugins for ui components\n    $scope.app = {};                 // controller for code editor\n    $scope.browse = {};              // controller for code editor\n    $scope.files = {};\n    $scope.shortcut = {};\n    $scope.socket = {};\n\n    /* \n     * load wiz editor options from localstorage\n     */\n    try {\n        let configuration = JSON.parse(localStorage[LOCALSTORAGEID]);\n        try { delete configuration.layout.opts.root.lastComponentSize; } catch (e) { }\n        $scope.configuration = configuration;\n    } catch (e) {\n        $scope.configuration = {};\n        $scope.configuration.layout = 2;\n        $scope.configuration.layout_menu_width = 360;\n    }\n\n    $scope.configuration.tab = {};\n    $scope.configuration.tab['tab1_val'] = CODELIST.ROUTE[0].id;\n    $scope.configuration.tab['tab2_val'] = CODELIST.ROUTE[1].id;\n    $scope.configuration.tab['tab3_val'] = CODELIST.ROUTE[2].id;\n    $scope.configuration.tab['tab4_val'] = 'debug';\n\n    $scope.$watch(\"configuration\", function () {\n        let configuration = angular.copy($scope.configuration);\n        localStorage[LOCALSTORAGEID] = JSON.stringify(configuration);\n    }, true);\n\n    /* \n     * layout selector using split pane\n     */\n    BUILDER.layout = async () => {\n        $scope.layout.viewstate = {};\n        $scope.layout.viewstate.root = { firstComponentSize: $scope.configuration.layout_menu_width };\n        $scope.layout.viewstate.horizonal = {};\n        $scope.layout.viewstate.vertical_1_1 = {};\n        $scope.layout.viewstate.vertical_1_2 = {};\n\n        $scope.layout.active_layout = $scope.configuration.layout;\n\n        $scope.$watch(\"layout\", function () {\n            $scope.configuration.layout_menu_width = $scope.layout.viewstate.root.firstComponentSize;\n            $scope.configuration.layout = $scope.layout.active_layout;\n        }, true);\n\n        $scope.layout.change = async (layout) => {\n            $scope.layout.active_layout = layout;\n\n            if (layout == 1) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 2) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 3) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            } else if (layout == 4) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 5) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 6) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            }\n\n            let _height = $('#editor-area').height();\n            let _width = $('#editor-area').width();\n\n            function _horizonal_split() {\n                var h = Math.round(_height / 3);\n                if (h > 400) h = 400;\n                $scope.layout.viewstate.horizonal.lastComponentSize = h;\n            }\n\n            function _horizonal_top() {\n                $scope.layout.viewstate.horizonal.lastComponentSize = 0;\n            }\n\n            if (layout == 1) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 2) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 3) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            } else if (layout == 4) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = _width;\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 5) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 6) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            }\n\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.delete = async () => {\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.add_language = async () => {\n            $('#modal-add-language').modal('show');\n        }\n\n        $scope.modal.keymaps = function () {\n            $('#modal-keymaps').modal('show');\n        }\n    }\n\n    /*\n     * define workspace controller\n     */\n\n    BUILDER.workspace = async () => {\n        $scope.workspace.list = WORKSPACES;\n\n        $scope.workspace.list[0].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[0].id;\n            $scope.configuration.tab['tab1_val'] = CODELIST.ROUTE[0].id;\n            $scope.configuration.tab['tab2_val'] = CODELIST.ROUTE[1].id;\n            $scope.configuration.tab['tab3_val'] = CODELIST.ROUTE[2].id;\n            $scope.configuration.tab['tab4_val'] = 'debug';\n            $scope.app.config.build();\n            await API.timeout();\n        };\n\n        $scope.workspace.list[1].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[1].id;\n            $scope.configuration.tab['tab1_val'] = CODELIST.APP[0].id;\n            $scope.configuration.tab['tab2_val'] = CODELIST.APP[1].id;\n            $scope.configuration.tab['tab3_val'] = CODELIST.APP[2].id;\n            $scope.configuration.tab['tab4_val'] = 'debug';\n\n            if ($scope.app.data)\n                $scope.app.editor.build();\n            await API.timeout();\n        };\n\n        $scope.workspace.list[2].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[2].id;\n            await API.timeout();\n        };\n\n        $scope.workspace.active_workspace = $scope.workspace.list[0].id;\n    }\n\n    /*\n     * define plugin interfaces for wiz\n     */\n\n    BUILDER.plugin = async () => {\n        $scope.plugin.editor = {};\n        $scope.plugin.editor.build = async (targettab, editor) => {\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n\n            for (let shortcutname in shortcuts) {\n                let monacokey = shortcuts[shortcutname].monaco;\n                let fn = shortcuts[shortcutname].fn;\n                if (!monacokey) continue;\n\n                editor.addCommand(monacokey, async () => {\n                    await fn();\n                    await $scope.shortcut.bind();\n                });\n            }\n        }\n\n        $scope.plugin.config = {};\n        $scope.plugin.config.build = async (targettab, editor) => {\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n\n            for (let shortcutname in shortcuts) {\n                let monacokey = shortcuts[shortcutname].monaco;\n                let fn = shortcuts[shortcutname].fn;\n                if (!monacokey) continue;\n\n                editor.addCommand(monacokey, async () => {\n                    await fn();\n                    await $scope.shortcut.bind();\n                });\n            }\n        }\n    }\n\n    /*\n     * define app controller\n     */\n\n    BUILDER.app = {};\n\n    BUILDER.app.base = async () => {\n        $scope.app.save = async (returnres) => {\n            $scope.data.apps.sort((a, b) => {\n                return a.id.localeCompare(b.id);\n            });\n            let data = angular.copy($scope.data);\n\n            // check app status\n            let cache = {};\n            for (let i = 0; i < data.apps.length; i++) {\n                if (!data.apps[i].id || data.apps[i].id.length == 0) return toastr.error(\"app id not defined\");\n                if (cache[data.apps[i].id]) return toastr.error(\"app id conflicts\");\n                cache[data.apps[i].id] = true;\n            }\n\n            for (let i = 0; i < data.apps.length; i++) {\n                for (let key in data.apps[i].dic) {\n                    try {\n                        data.apps[i].dic[key] = JSON.parse(data.apps[i].dic[key], null, 4);\n                    } catch (e) {\n                        delete data.apps[i].dic[key];\n                    }\n                }\n            }\n\n            let res = await API.update(data);\n\n            if (returnres) return res;\n\n            if (res.code == 200) {\n                toastr.success(\"Saved\");\n                await $scope.app.preview();\n            } else {\n                toastr.error(res.data);\n            }\n\n            await $scope.shortcut.bind();\n        }\n\n        $scope.app.tab = {};\n        $scope.app.tab.active = async (tab) => {\n            $scope.app.tab.activetab = tab;\n            await API.timeout();\n        }\n\n        $scope.app.uninstall = async () => {\n            await API.delete(PLUGIN_ID);\n            location.href = \"/wiz/admin/setting/plugin\";\n        }\n\n        $scope.app.delete = async (item) => {\n            $scope.data.apps.remove(item);\n            $scope.data.apps.sort((a, b) => {\n                return a.id.localeCompare(b.id);\n            });\n            delete $scope.app.data;\n            await API.timeout();\n        }\n\n        $scope.app.load = async (item) => {\n            // set data\n            $scope.app.data = item;\n\n            if (!$scope.app.data.dic) {\n                $scope.app.data.dic = { \"default\": \"{}\" };\n            }\n\n            await $scope.app.editor.build();\n            await $scope.layout.change($scope.layout.active_layout);\n            await $scope.app.preview();\n\n            await API.timeout(500);\n\n            if ($scope.app.tab.activetab && $scope.app.editor.cache[$scope.app.tab.activetab])\n                $scope.app.editor.cache[$scope.app.tab.activetab].focus();\n        }\n\n\n        $scope.app.create = async () => {\n            $scope.data.apps.push({});\n            $scope.app.load($scope.data.apps[$scope.data.apps.length - 1]);\n        };\n\n        $scope.app.preview = async () => {\n            let url = $scope.app.config.url;\n\n            if (url && url.length > 0) {\n                if (url[0] == \"/\") url = url.substring(1);\n                url = \"/wiz/admin/\" + url\n            }\n\n            if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) {\n                url = await PREVIEW_URL($scope.app.data.id);\n            }\n\n            $scope.app.preview.status = false;\n            await API.timeout();\n\n            $('iframe.preview').attr('src', url);\n            $('iframe.preview').on('load', function () {\n                $scope.app.preview.status = true;\n                $timeout();\n            });\n        }\n    }\n\n    BUILDER.app.config = async () => {\n        $scope.app.config = {};\n        $scope.app.config.cache = {};\n        $scope.app.config.properties = {};\n        $scope.app.config.code = {};\n\n        $scope.app.config.code.list = CODELIST.ROUTE;\n\n        $scope.app.config.code.langselect = async (tab) => {\n            var obj = $scope.configuration.tab[tab + '_val'];\n            if (obj == 'dic') return 'json';\n            if (obj == 'html') return 'pug';\n            if (obj == 'js') return 'javascript';\n            if (obj == 'css') return 'scss';\n            return 'python';\n        }\n\n        $scope.app.config.code.change = async (targettab, view) => {\n            if (view) {\n                $scope.configuration.tab[targettab + '_val'] = view;\n                await API.timeout();\n\n                if (view == 'preview') {\n                    $scope.app.preview();\n                    return;\n                }\n\n                if (view == 'debug') {\n                    return;\n                };\n\n                let language = $scope.app.config.properties[targettab].language = await $scope.app.config.code.langselect(targettab);\n\n                if ($scope.app.config.cache[targettab]) {\n                    let model = $scope.app.config.cache[targettab].getModel();\n                    monaco.editor.setModelLanguage(model, language);\n\n                    $scope.app.config.cache[targettab].focus();\n                }\n            } else {\n                if ($scope.app.tab.activetab != targettab) {\n                    $scope.app.tab.activetab = targettab;\n                    await API.timeout();\n                    await API.timeout(500);\n                    $scope.app.config.cache[targettab].focus();\n                }\n            }\n        }\n\n        $scope.app.config.code.prev = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n            if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n                if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.config.code.change(tab);\n            $scope.app.config.cache[tab].focus();\n        }\n\n        $scope.app.config.code.next = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n            tab = tab % $scope.layout.accessable_tab.length;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n                tab = tab % $scope.layout.accessable_tab.length;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.config.code.change(tab);\n            $scope.app.config.cache[tab].focus();\n        }\n\n        $scope.app.config.build = async () => {\n            $scope.app.config.viewstate = false;\n            await API.timeout();\n\n            $scope.app.config.properties.tab1 = $scope.monaco(await $scope.app.config.code.langselect('tab1'));\n            $scope.app.config.properties.tab2 = $scope.monaco(await $scope.app.config.code.langselect('tab2'));\n            $scope.app.config.properties.tab3 = $scope.monaco(await $scope.app.config.code.langselect('tab3'));\n\n            let bindonload = async (targettab) => {\n                $scope.app.config.properties[targettab].onLoad = async (editor) => {\n                    await $scope.plugin.config.build(targettab, editor);\n                    $scope.app.config.cache[targettab] = editor;\n                }\n            }\n\n            for (var i = 1; i <= 3; i++)\n                bindonload('tab' + i);\n\n            $scope.app.config.viewstate = true;\n            await API.timeout();\n        }\n\n    }\n\n    BUILDER.app.editor = async () => {\n        $scope.app.editor = {};\n        $scope.app.editor.cache = {};\n        $scope.app.editor.properties = {};\n        $scope.app.editor.code = {};\n\n        $scope.app.editor.code.list = CODELIST.APP;\n        $scope.app.editor.code.dic = {};\n        $scope.app.editor.code.dic.add = async (lang) => {\n            if (!lang || lang.length < 2) {\n                toastr.error(\"at least 2 char\");\n                return;\n            }\n            lang = lang.toLowerCase();\n            $scope.app.data.dic[lang] = \"{}\";\n            $('#modal-add-language').modal('hide');\n            await API.timeout();\n        }\n\n        $scope.app.editor.code.langselect = async (tab) => {\n            var obj = $scope.configuration.tab[tab + '_val'];\n            if (obj == 'dic') return 'json';\n            if (obj == 'html') return 'pug';\n            if (obj == 'js') return 'javascript';\n            if (obj == 'css') return 'scss';\n            return 'python';\n        }\n\n        $scope.app.editor.code.change = async (targettab, view) => {\n            if (view) {\n                $scope.configuration.tab[targettab + '_val'] = view;\n                await API.timeout();\n\n                if (view == 'preview') {\n                    $scope.app.preview();\n                    return;\n                }\n\n                if (view == 'debug') {\n                    return;\n                };\n\n                let language = $scope.app.editor.properties[targettab].language = await $scope.app.editor.code.langselect(targettab);\n\n                if ($scope.app.editor.cache[targettab]) {\n                    let model = $scope.app.editor.cache[targettab].getModel();\n                    monaco.editor.setModelLanguage(model, language);\n\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            } else {\n                if ($scope.app.tab.activetab != targettab) {\n                    $scope.app.tab.activetab = targettab;\n                    await API.timeout();\n                    await API.timeout(500);\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            }\n        }\n\n        $scope.app.editor.code.prev = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n            if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n                if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.code.next = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n            tab = tab % $scope.layout.accessable_tab.length;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n                tab = tab % $scope.layout.accessable_tab.length;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.build = async () => {\n            $scope.app.editor.viewstate = false;\n            await API.timeout();\n\n            $scope.app.editor.properties.tab1 = $scope.monaco(await $scope.app.editor.code.langselect('tab1'));\n            $scope.app.editor.properties.tab2 = $scope.monaco(await $scope.app.editor.code.langselect('tab2'));\n            $scope.app.editor.properties.tab3 = $scope.monaco(await $scope.app.editor.code.langselect('tab3'));\n\n            let bindonload = async (targettab) => {\n                $scope.app.editor.properties[targettab].onLoad = async (editor) => {\n                    await $scope.plugin.editor.build(targettab, editor);\n                    $scope.app.editor.cache[targettab] = editor;\n                }\n            }\n\n            for (var i = 1; i <= 3; i++)\n                bindonload('tab' + i);\n\n            $scope.app.editor.viewstate = true;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.browse = async () => {\n        $scope.browse.select = async (item) => {\n            await $scope.app.load(item);\n        }\n\n        $scope.browse.search = async (val) => {\n            val = val.toLowerCase();\n            for (var i = 0; i < $scope.browse.data.length; i++) {\n                let searchindex = ['title', 'namespace', 'id', 'route'];\n                $scope.browse.data[i].hide = true;\n                for (let j = 0; j < searchindex.length; j++) {\n                    try {\n                        let key = searchindex[j];\n                        let keyv = $scope.browse.data[i].package[key].toLowerCase();\n                        if (keyv.includes(val)) {\n                            $scope.browse.data[i].hide = false;\n                            break;\n                        }\n                    } catch (e) {\n                    }\n                }\n                if (val.length == 0)\n                    $scope.browse.data[i].hide = false;\n            }\n\n            await API.timeout();\n        }\n\n        $scope.browse.next = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current + 1;\n            current = current % $scope.browse.data.length;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n\n        $scope.browse.prev = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current - 1;\n            if (current < 0)\n                current = $scope.browse.data.length - 1;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n    }\n\n    BUILDER.files = async () => {\n        $scope.files.data = null;\n        $scope.files.menus = FILEMENUS;\n\n        $scope.files.select = async (item) => {\n            $scope.files.data = item;\n            // TODO load\n            await $scope.files.preview(item);\n            await API.timeout();\n        }\n\n\n        $scope.files.preview = (item) => new Promise((resolve) => {\n            $scope.files.preview_status = false;\n            $timeout(function () {\n                let url = \"/wiz/admin/setting/plugin/browser/\" + PLUGIN_ID + \"/\" + item.id;\n                $('iframe#file-browser').attr('src', url);\n                $('iframe#file-browser').on('load', function () {\n                    $scope.files.preview_status = true;\n                    $timeout(resolve);\n                });\n            });\n        });\n    }\n\n    BUILDER.shortcuts = async () => {\n        $scope.shortcut.configuration = (monaco) => {\n            return {\n                'tab1': {\n                    key: 'Alt Digit1',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT1,\n                    fn: async () => {\n                        await $scope.workspace.list[0].active();\n                    }\n                },\n                'tab2': {\n                    key: 'Alt Digit2',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT2,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                    }\n                },\n                'tab3': {\n                    key: 'Alt Digit3',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT3,\n                    fn: async () => {\n                        await $scope.workspace.list[2].active();\n                    }\n                },\n                'editor_prev': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_A,\n                    fn: async () => {\n                        let tabs = TABS.ROUTE;\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) tabs = TABS.APP;\n\n                        let targettab = $scope.app.tab.activetab;\n                        var prev = tabs.indexOf($scope.configuration.tab[targettab + \"_val\"]) - 1;\n                        if (prev < 0) prev = tabs[tabs.length - 1];\n                        else prev = tabs[prev];\n\n                        if (prev == 'preview') {\n                            prev = tabs.indexOf(prev) - 1;\n                            if (prev < 0) prev = tabs[tabs.length - 1];\n                            else prev = tabs[prev];\n                        }\n\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) await $scope.app.editor.code.change(targettab, prev);\n                        else await $scope.app.config.code.change(targettab, prev);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'editor_next': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        let tabs = TABS.ROUTE;\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) tabs = TABS.APP;\n                        let targettab = $scope.app.tab.activetab;\n                        var next = tabs[(tabs.indexOf($scope.configuration.tab[targettab + \"_val\"]) + 1) % tabs.length];\n                        if (next == 'preview') {\n                            next = tabs[(tabs.indexOf(next) + 1) % tabs.length];\n                        }\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) await $scope.app.editor.code.change(targettab, next);\n                        else await $scope.app.config.code.change(targettab, next);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'app_prev': {\n                    key: 'Alt KeyJ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_J,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.prev();\n                    }\n                },\n                'app_next': {\n                    key: 'Alt KeyK',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.next();\n                    }\n                },\n                'workspace_prev': {\n                    key: 'Alt KeyZ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_Z,\n                    fn: async () => {\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) await $scope.app.editor.code.prev();\n                        else await $scope.app.config.code.prev();\n\n                    }\n                },\n                'workspace_next': {\n                    key: 'Alt KeyX',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_X,\n                    fn: async () => {\n                        if ($scope.workspace.active_workspace == $scope.workspace.list[1].id) await $scope.app.editor.code.next();\n                        else await $scope.app.config.code.next();\n                    }\n                },\n                'search': {\n                    key: 'Alt KeyF',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_F,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                        $('#search').focus();\n                    }\n                },\n                'save': {\n                    key: 'Ctrl KeyS',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        await $scope.app.save();\n                    }\n                },\n                'clear': {\n                    key: 'Ctrl KeyK',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        await $scope.socket.clear();\n                    }\n                }\n            }\n        };\n\n        $scope.shortcut.bind = async () => {\n            if (!window.monaco) return;\n            $(window).unbind();\n\n            let shortcut_opts = {};\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n            for (let key in shortcuts) {\n                let keycode = shortcuts[key].key;\n                let fn = shortcuts[key].fn;\n                if (!keycode) continue;\n                shortcut_opts[keycode] = async (ev) => {\n                    ev.preventDefault();\n                    await fn();\n                };\n            }\n\n            shortcutjs(window, shortcut_opts);\n        }\n\n        window.addEventListener(\"focus\", $scope.shortcut.bind, false);\n    }\n\n    await BUILDER.loading();\n    await BUILDER.layout();\n    await BUILDER.plugin();\n    await BUILDER.modal();\n    await BUILDER.workspace();\n    await BUILDER.app.base();\n    await BUILDER.app.config();\n    await BUILDER.app.editor();\n    await BUILDER.browse();\n    await BUILDER.shortcuts();\n    await BUILDER.files();\n\n    $scope.data = await API.info(PLUGIN_ID);\n\n    $scope.app.config.url = \"/\" + $scope.data.info.route;\n\n    for (let i = 0; i < $scope.data.apps.length; i++) {\n        try {\n            for (let key in $scope.data.apps[i].dic) {\n                $scope.data.apps[i].dic[key] = JSON.stringify($scope.data.apps[i].dic[key], null, 4);\n            }\n        } catch (e) {\n            $scope.data.apps[i].dic = {};\n        }\n    }\n\n    $scope.data.apps.sort((a, b) => {\n        return a.id.localeCompare(b.id);\n    });\n\n    await $scope.layout.change($scope.layout.active_layout);\n    await $scope.app.config.build();\n\n    /*\n     * socket.io event binding for trace log\n     */\n    let ansi_up = new AnsiUp();\n    let socket = io(\"/wiz\");\n\n    $scope.socket.log = \"\";\n    $scope.socket.clear = async () => {\n        $scope.socket.log = \"\";\n        await API.timeout();\n    }\n\n    socket.on(\"connect\", function (data) {\n        if (!data) return;\n        $scope.socket.id = data.sid;\n    });\n\n    socket.on(\"debug\", function (data) {\n        data = data.replace(/ /gim, \"__SEASONWIZPADDING__\");\n        data = ansi_up.ansi_to_html(data).replace(/\\n/gim, '<br>').replace(/__SEASONWIZPADDING__/gim, '<div style=\"width: 6px; display: inline-block;\"></div>');\n        $scope.socket.log = $scope.socket.log + data;\n        $timeout(function () {\n            var element = $('.debug-messages')[0];\n            if (!element) return;\n            element.scrollTop = element.scrollHeight - element.clientHeight;\n        });\n    });\n\n    await $scope.loading.hide();\n}","css":".main-header {\n    .container {\n        margin: 0 auto;\n        max-width: 720px;\n        padding-top: 88px;\n        padding-bottom: 96px;\n        color: white;\n    }\n\n    .subtitle {\n        font-size: 24px;\n        color: rgba(255, 255, 255, .6);\n    }\n\n    .title {\n        font-size: 40px;\n    }\n\n    .input-group {\n        .form-control {\n            border: 0;\n            // border-radius: 0;\n            padding: 16px;\n            font-size: 16px;\n            color: black;\n        }\n\n        .btn {\n            border: 0;\n            box-shadow: none;\n            border-radius: 0;\n            background: #ff922b;\n            color: white;\n            font-size: 20px;\n        }\n    }\n\n    .icon-menu {\n        padding: 18px 0;\n        color: white;\n\n        &:hover {\n            cursor: pointer;\n            background-color: #ff922b;\n        }\n\n        .main-icon {\n            height: 80px;\n\n        }\n\n        img {\n            width: 80px;\n            height: 80px;\n        }\n    }\n}\n\n.card {\n\n    h2,\n    h3 {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n}\n\n.card-hover:hover {\n    background: rgba(255, 146, 43, .2);\n    cursor: pointer;\n}\n\n.card-statistic {\n    img {\n        margin-top: 12px;\n        margin-bottom: 12px;\n        width: 36px;\n        height: 36px;\n    }\n}\n\n.page {\n    background: white;\n}\n\n@media all and (min-width:721px) {}\n\n.filetree {\n    .title {\n        cursor: pointer;\n    }\n\n    .title:hover {\n        background: rgba(255, 255, 255, .1);\n    }\n\n    .title.active {\n        background: rgba(255, 255, 255, .2);\n    }\n\n    .sub {\n        padding-left: 16px;\n    }\n}\n\n@media (min-width:769px) {\n    html, body {\n        overflow: hidden;\n    }\n    .panel-layout {\n        padding-top: 64px;\n    }\n    .panel-layout .panel-menu {\n        position: fixed;\n        width: 360px;\n        height: 100%;\n        top: 0;\n        left: 0;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-submenu {\n        position: fixed;\n        width: 0;\n        height: 100%;\n        top: 0;\n        left: 360px;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-context {\n        padding-left: 360px;\n        height: 100%;\n    }\n    .fixed-top#top-nav .container-xl {\n        max-width: none;\n    }\n    /* side menu off */\n    .sidemenu-off .panel-menu {\n        width: 76px;\n    }\n    .sidemenu-off .panel-menu .menu-layout {\n        padding: 0 !important;\n    }\n    .sidemenu-off .panel-menu h3 {\n        text-align: center;\n    }\n    .sidemenu-off .panel-menu h3 i {\n        padding: 16px !important;\n    }\n    .sidemenu-off .panel-menu .minify {\n        display: none;\n    }\n    .sidemenu-off .panel-menu .layout-selector {\n        padding: 4px !important;\n    }\n    .sidemenu-off .button-container {\n        padding: 0 8px;\n    }\n    .sidemenu-off .panel-context {\n        padding-left: 76px;\n        height: 100%;\n    }\n}\n\n.layout-icon {\n    display: inline-table;\n    width: 24px;\n    height: 24px;\n    border: 2px solid #ffffff;\n    border-radius: 10%;\n}\n\n.layout-icon .layout-row, .layout-icon .layout-column {\n    height: 24px;\n}\n\n.layout-icon.rows-2 .layout-row, .layout-icon.rows-2 .layout-column {\n    height: 12px;\n}\n\n.layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #ffffff;\n}\n\n.layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #ffffff;\n}\n\n.layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.layout-selector {\n    display: inline-block;\n    line-height: 0;\n    border-radius: 10%;\n    cursor: pointer;\n}\n\n.layout-selector:hover, .layout-selector.active {\n    background: #ffffff;\n}\n\n.layout-selector:hover .layout-icon, .layout-selector.active .layout-icon {\n    border-color: #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row, .layout-selector.active .layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-selector:hover .layout-icon .layout-row .layout-column, .layout-selector.active .layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row:last-child .layout-column, .layout-selector.active .layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-selector:hover .layout-icon .layout-column, .layout-selector.active .layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-column:last-child, .layout-selector.active .layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.code-tabs tr, .code-tabs td {\n    border: none;\n    padding: 0;\n}\n\n.fixed-top#top-nav .container-xl {\n    max-width: none;\n}\n\n.code-table {\n    table-layout: fixed;\n}\n\n.code-table td {\n    /* border-right: 1px solid rgba(110, 117, 130, .2); */\n}\n\n.code-table td.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: col-resize;\n}\n\n.code-table tr.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: row-resize;\n}\n\n.code-table .code-tr td {\n    height: calc(50vh - 104px + 54px - 15px);\n    overflow: hidden;\n    vertical-align: top;\n}\n\n.code-table .code-tr td .code-input {\n    height: calc(50vh - 104px + 54px - 16px);\n    overflow: hidden;\n}\n\n.code-table .code-tr td .code-input .CodeMirror {\n    height: calc(50vh - 104px + 54px - 16px);\n    display: block;\n}\n\n.h-full .code-table .code-tr td {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input {\n    max-height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input .CodeMirror {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.panel-context {\n    overflow: hidden !important;\n}\n\n.unselectable * {\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.code-tabs td {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\nhtml, body {\n    height: 100%;\n    min-height: 100%;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    padding-top: 64px;\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.split-pane-component {\n    background: #fff;\n}\n\n.btn-group button {\n    box-shadow: none;\n}\n\n.tree-container {\n    color: #fff;\n    font-size: 16px;\n}\n\n.tree-container .root-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .root-tree.active {\n    background: rgba(255, 255, 255, .1);\n    border-radius: 4px;\n}\n\n\n.tree-container .sub .sub-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-left: 16px;\n    padding-left: 8px;\n    margin-bottom: 4px;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .sub .sub-title.active {\n    background: #fff !important;\n    color: rgb(110, 117, 130);\n}\n\n.tree-container .sub .sub-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\n.tree-container .root-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\nth.text-center {\n    white-space: nowrap;\n}\n\n.tree-container span.namespace {\n    font-size: 14px;\n    color: rgba(255, 255, 255, .6);\n}\n\n.tree-container .sub .sub-title.active span.namespace {\n    color: rgba(0, 0, 0, .6);\n}\n\n"},{"dic":{"default":{}},"id":"core.setting.plugin.list","name":"/plugin/list","compile_html":"on","compile_css":"off","compile_js":"on","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header\n                            .row.align-items-center\n                                .col-auto\n                                    .page-pretitle SEASON WIZ\n                                    h2.page-title Plugin\n\n                                .col-auto.ml-auto.d-print-none\n                                    .d-flex\n                                        input.form-control(type=\"text\" placeholder=\"Search...\" ng-model=\"search.text\" ng-change=\"event.search(search.text)\" style=\"width: 240px;\")\n                                        a.btn.btn-light.pr-4.pl-4.ml-2(style=\"width: 140px;\" ng-click=\"modal.install()\")\n                                            i.mr-2.fas.fa-cloud-download-alt\n                                            | Install\n                                        a.btn.btn-light.pr-4.pl-4.ml-2(style=\"width: 140px;\" ng-click=\"modal.create()\")\n                                            i.mr-2.fas.fa-plus\n                                            | Create\n\n                        .hr.mt-2\n\n                        .row.row-deck.mt-4\n                            .col-md-4(ng-repeat=\"item in list\" ng-if=\"!item.hide\")\n                                .card.d-flex.flex-column\n                                    .card-body.d-flex.flex-column\n                                        h3.card-title.mb-2\n                                            a(ng-href=\"/wiz/admin/setting/plugin/editor/{{item.id}}\") {{item.name}}\n                                        .text-muted {{item.description}}\n                                        .d-flex.align-items-center.pt-5.mt-auto\n                                            span.avatar.avatar-md(style=\"background-image: url({{item.author_icon}});\" ng-if=\"item.author_icon\")\n                                            span.avatar.avatar-md(ng-if=\"!item.author_icon\") {{item.author_name ? item.author_name.toUpperCase().substring(0, 2) : 'UN'}}\n                                            .ml-3(style=\"line-height: 1.3;\")\n                                                a.text-body {{item.author_name ? item.author_name : 'Unknown'}}\n                                                small.d-block.text-muted {{item.version ? item.version : 'unknown version'}}\n                                            .ml-auto\n                                                a.icon.d-none.d-md-inline-block.ml-3.text-muted(ng-if=\"item.config\" href=\"#\")\n                                                    i.fas.fa-cog\n                                                a.icon.d-none.d-md-inline-block.ml-3.text-muted(ng-click=\"event.download(item.id, item.name)\" href=\"#\")\n                                                    i.fas.fa-cloud-download-alt\n                                                a.icon.d-none.d-md-inline-block.ml-3.text-muted(ng-href=\"/wiz/admin/setting/plugin/editor/{{item.id}}\")\n                                                    i.fas.fa-code\n\n    #modal-create.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Plugin ID\n                    div.mb-4\n                        input.form-control(type=\"text\" ng-model=\"modal.data.create.id\" placeholder=\"Plugin ID\" ng-change=\"event.change_id(modal.data.create.id)\")\n\n                    .modal-title Plugin Name\n                    div\n                        input.form-control(type=\"text\" ng-model=\"modal.data.create.name\" placeholder=\"Plugin Name\")\n\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-click=\"event.create()\") Create\n\n    \n    #modal-install.modal.fade(tabindex=\"-2\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Plugin Install\n                    div\n                        input#plugin-install-input-file.form-control(type=\"file\")\n                    div(ng-if=\"modal.data.install.data\")\n                        div(style=\"float: right;\") {{modal.data.install.size}}\n\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-disabled=\"!modal.data.install.data\" ng-click=\"event.install()\") Install\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    let API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        list: () => new Promise((resolve, reject) => {\n            let url = wiz.API.url(\"list\");\n            $.get(url, API.handler(resolve, reject));\n        }),\n        install: (data) => new Promise((resolve, reject) => {\n            let url = wiz.API.url(\"install\");\n            data = angular.copy(data);\n            $.post(url, data, resolve);\n        }),\n        create: (data) => new Promise((resolve, reject) => {\n            let url = wiz.API.url(\"create\");\n            data = angular.copy(data);\n            $.post(url, data, resolve);\n        }),\n        download: (data) => new Promise((resolve, reject) => {\n            let url = wiz.API.url(\"export\");\n            data = angular.copy(data);\n            $.post(url, data, resolve);\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.math = Math;\n\n    $scope.list = [];\n    $scope.event = {};\n\n    $scope.event.load = async () => {\n        let data = await API.list();\n\n        $scope.list = data;\n        $scope.list.sort((a, b) => {\n            let comp = 0;\n            try {\n                comp = a.name.localeCompare(b.name);\n                if (comp != 0) return comp;\n            } catch (e) { }\n            comp = a.id.localeCompare(b.id);\n            return comp;\n        });\n\n        await API.timeout();\n    }\n\n    $scope.event.search = async (val) => {\n        val = val.toLowerCase();\n        for (var i = 0; i < $scope.list.length; i++) {\n            if (val.length == 0) {\n                $scope.list[i].hide = false;\n                continue;\n            }\n\n            let searchindex = ['name', 'id', 'author_name'];\n            $scope.list[i].hide = true;\n            for (let j = 0; j < searchindex.length; j++) {\n                try {\n                    let key = searchindex[j];\n                    let keyv = $scope.list[i][key].toLowerCase();\n                    if (keyv.includes(val)) {\n                        $scope.list[i].hide = false;\n                        break;\n                    }\n                } catch (e) {\n                }\n            }\n        }\n\n        $timeout();\n    }\n\n    $scope.modal = {};\n    $scope.modal.data = {};\n    \n    $scope.modal.install = async () => {\n        $scope.modal.data.install = {\n            size: '',\n            data: null,\n        };\n        $('#modal-install').modal('show');\n    }\n\n    $scope.modal.create = async () => {\n        $scope.modal.data.create = {};\n        $('#modal-create').modal('show');\n    }\n\n    $scope.event.install = async () => {\n        try {\n            let app_json = angular.copy(JSON.parse($scope.modal.data.install.data));\n            if(app_json.info === undefined || app_json.route === undefined || app_json.apps === undefined) {\n                toastr.error(\"Invalid data\");\n                return;\n            }\n            const { id } = app_json.info;\n            let { code, data } = await API.install({\n                id,\n                data: JSON.stringify(app_json),\n            });\n            if(code !== 200) {\n                toastr.error(data);\n                return;\n            }\n            const { route } = app_json.info;\n            const tmp = app_json.apps.filter(({name}) => {\n                if(name.toLowerCase() === \"readme\") return true;\n                return false;\n            });\n            if (tmp.length === 0) {\n                location.reload();\n                return;\n            }\n            const url = `/wiz/admin/${route}/readme`;\n            console.log(url);\n            window.open(url, \"_blank\");\n            location.reload();\n        }\n        catch(err) {\n            console.log(err);\n        }\n    }\n\n    $scope.event.create = async () => {\n        let pd = angular.copy($scope.modal.data.create);\n        let res = await API.create(pd);\n\n        if (res.code == 200) {\n            location.reload();\n        } else {\n            toastr.error(res.data);\n        }\n    };\n\n\n    $scope.event.change_id = async (val) => {\n        $scope.modal.data.create.name = val;\n        await API.timeout();\n    };\n\n    const install_file_handler = async (file) => {\n        let size_kb = file.size / 1000;\n        size_kb = +(Math.round(size_kb + \"e+2\")  + \"e-2\");\n        $scope.modal.data.install.size = `${size_kb} KB`;\n        $timeout();\n        const fr = new FileReader();\n        fr.readAsText(file, 'UTF-8');\n        fr.addEventListener(\"load\", (e) => {\n            const { result } = e.target;\n            $scope.modal.data.install.data = result;\n            $timeout();\n        });\n    }\n\n    const json_download = (filename, text) => {\n        const element = document.createElement(\"a\");\n        element.setAttribute('href','data:text/plain;charset=utf-8, ' + encodeURIComponent(text));\n        element.setAttribute('download', filename);\n        document.body.appendChild(element);\n        element.click();\n    }\n\n    $scope.event.download = async (plugin_id, plugin_name) => {\n        const { code, data } = await API.download({\n            id: plugin_id,\n            name: plugin_name,\n        });\n        if(code !== 200) {\n            toastr.error(\"FAILED\");\n            return;\n        }\n\n        const filename = plugin_name.replace(/\\s+/g, \"_\") + \".wiz\";\n        json_download(filename, data);\n    }\n\n    document.querySelector(\"#plugin-install-input-file\").addEventListener(\"change\", (e) => {\n        const files = e.target.files;\n        if(files.length === 0) return;\n        const file = files[0];\n        try {\n            if(file.name.split(\".\").slice(-1)[0].toLowerCase() !== \"wiz\") {\n                toastr.error(\"Support Only 'wiz' ext\");\n                e.preventDefault();\n                e.target.value = \"\";\n                return;\n            }\n        }\n        catch(err) {\n            console.error(err);\n            e.preventDefault();\n            toastr.error(\"Support Only 'wiz' ext\");\n            e.target.value = \"\";\n            return;\n        }\n        install_file_handler(file);\n    });\n\n    $scope.event.load();\n}","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","api":"import json\n\nplugin = framework.model(\"plugin\")\n\ndef list(framework):\n    rows = plugin.list()\n    framework.response.status(200, rows)\n\ndef export(framework):\n    plugin_id = framework.request.query(\"id\", True)\n    plugin_name = framework.request.query(\"name\", True)\n    app = plugin.get(plugin_id)\n    app = json.dumps(app)\n    framework.response.json({'code': 200, 'data': app})\n\n\ndef install(framework):\n    plugin_id = framework.request.query(\"id\", True)\n    data = framework.request.query(\"data\", True)\n    data = json.loads(data)\n    status = plugin.install(plugin_id, **data)\n    framework.response.status(200)\n\ndef create(framework):\n    plugin_id = framework.request.query(\"id\", True)\n    name = framework.request.query(\"name\", True)\n    status = plugin.create(plugin_id, name)\n    framework.response.status(200)"},{"dic":{"default":{}},"id":"core.setting.status","html":"div(style=\"height: calc(100% - 112px);\")\n    mixin navs(menu)\n        .root-tree\n            .filetree.text-dark(class=menu['class'])\n                a.title.d-flex.text-dark(href=\"{$ menu.url $}\")\n                    span\n                        i.mr-1(class=menu['icon'] style=\"width: 18px; text-align: center;\")\n                        span= menu['title']\n\n    .main-panel.container.p-0(style=\"height: 100%;\")\n        div(data-split-pane data-split-pane-properties=\"properties.root\")\n            div(data-split-pane-component data-width=\"200px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        .tree-container\n                            - if settingmenus\n                                - each menu in settingmenus\n                                    +navs(menu)\n\n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-editor(style=\"height: 100%; overflow: auto;\")\n                    .p-4.pr-6.pl-6\n                        .page-header.mb-0\n                            .row.align-items-center\n                                .col-auto\n                                    h2.page-title System Status\n\n                                .col-auto.ml-auto.d-print-none\n                                    button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n                                    button.btn.btn-light.ml-2(ng-click=\"event.apply()\") Apply\n\n                        .info-form.row\n                            .col-md-12\n                                .text-muted System status and configuration.\n                                .text-muted you can set host, port of developement server.\n\n                        .info-form.row.first-child\n                            .col-md-4 \n                                h4 SEASON WIZ Version\n                            .col-md-8.text-center\n                                a(href=\"https://github.com/season-framework/wiz\" target=\"_blank\")\n                                    h4= SEASON_VERSION\n\n                        .info-form.row\n                            .col-md-4 \n                                h4 Python Version\n                            .col-md-8.text-center\n                                h4= PYTHON_VERSION\n\n                        .info-form.row\n                            .col-md-4\n                                h4.mb-0 Build Clean\n                                span.text-muted Clean all build caches.\n                            .col-md-8.pt-2\n                                button.btn.btn-block.btn-outline-dark(ng-click=\"event.clean()\") Clean\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Host\n                                span.text-muted Development server host. Defaults to '0.0.0.0'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.host\" placeholder=\"0.0.0.0\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Port\n                                span.text-muted Development server port. Default to '3000'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.port\" placeholder=\"3000\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 app.secret_key\n                                span.text-muted Session secret key for flask app. Default to 'season-wiz'.\n                            .col-md-8.pt-3\n                                input.form-control.text-center(type=\"text\" ng-model=\"data.framework.secret_key\" placeholder=\"season-wiz\")\n\n                        .info-form.row\n                            .col-md-4 \n                                h4.mb-0 Log Level\n                                span.text-muted If you don’t configure logging, default log level is usually ‘warning’.\n                            .col-md-8.pt-3\n                                select.form-select.text-center(ng-model=\"data.framework.log_level\")\n                                    option(value=0) DEBUG\n                                    option(value=1) INFO\n                                    option(value=2) DEV\n                                    option(value=3) WARNING\n                                    option(value=4) ERROR\n                                    option(value=5) CRITICAL\n\n    .bg-dark.text-center(ng-if=\"!loaded\" style=\"width: 100%; height: 100%; position: fixed; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")","controller":"import sys\n\nwiz = framework.model(\"wiz\")\ntry: kwargs[\"SEASON_VERSION\"] = season.version\nexcept: kwargs[\"SEASON_VERSION\"] = \"<= 0.3.8\"\nkwargs[\"PYTHON_VERSION\"] = sys.version\nkwargs[\"themes\"] = wiz.themes()\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\n","name":"/status","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst themes = wiz.data.themes;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst API_URL = wiz.API.url(\"\");\n\nlet setting_builder = function ($scope, $timeout, $sce) {\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.loaded = true;\n\n    $scope.env = {}\n    $scope.env.branches = BRANCHES;\n    $scope.env.branch = BRANCH;\n\n    $scope.modal = {};\n    $scope.modal.config = {};\n    $scope.modal.message = function (data) {\n        $scope.modal.config = data;\n        $timeout();\n        $('#modal-message').modal('show');\n    };\n\n    $scope.modal.message.hide = function () {\n        $scope.modal.config = {};\n        $timeout();\n        $('#modal-message').modal('hide');\n    }\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    setting_builder($scope, $timeout, $sce);\n\n    const API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        }),\n        info: () => new Promise((resolve, reject) => {\n            $.post(API_URL + 'packageinfo', {}, API.handler(resolve, reject));\n        }),\n        update: (data) => new Promise((resolve, reject) => {\n            $.post(API_URL + 'update', { data: JSON.stringify(data, null, 4) }, API.handler(resolve, reject));\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get(API_URL+ 'clean', API.handler(resolve, reject));\n        }),\n        apply: () => new Promise((resolve, reject) => {\n            $.post(API_URL+ 'apply', {}, API.handler(resolve, reject));\n        })\n    };\n\n    $scope.monaco_properties = $scope.monaco(\"python\");\n    $scope.monaco_properties.minimap = {\n        enabled: false\n    };\n\n    $scope.status = {};\n    $scope.themes = themes;\n    $scope.data = await API.info();\n\n    $scope.event = {};\n\n    $scope.event.update = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            toastr.success(\"Saved\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.apply = async () => {\n        let data = angular.copy($scope.data);\n        try {\n            await API.update(data);\n            await API.apply();\n            toastr.success(\"Applied\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    $scope.event.clean = async () => {\n        try {\n            await API.clean();\n            toastr.success(\"Cleaned\");\n        } catch (e) {\n            toastr.error(e.data);\n        }\n    }\n\n    let shortcuts = async () => {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': async (ev) => {\n                $scope.event.update();\n                ev.preventDefault();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    await API.timeout();\n}","api":"import season\nimport json\nimport datetime\nfrom werkzeug.exceptions import HTTPException\n\ndef packageinfo(framework):\n    package = framework.model(\"config\").get()        \n    framework.response.status(200, package)\n\ndef update(framework):\n    data = framework.request.query(\"data\", True)\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"wiz.json\", data)\n    framework.response.status(200, True)\n\ndef apply(framework):\n    config = framework.model(\"config\")\n\n    # create config code\n    configpy = config.build_config()\n    wizconfigpy = config.build_wiz()\n\n    # save config files\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.write(\"config/config.py\", configpy)\n    fs.write(\"config/wiz.py\", wizconfigpy)\n    \n    framework.response.status(200, True)\n\ndef clean(framework):\n    fs = framework.model(\"wizfs\").use(\"wiz\")\n    fs.delete(\"public/templates\")\n    fs.delete(\"cache\")\n    fs.write(\"config/.cache\", datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n    framework.response.status(200, True)","css":"html,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n}\n\n.main-panel {\n    width: 100%;\n}\n\n.filetree {\n    position: relative;\n\n    .title {\n        cursor: pointer;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n\n        .file-actions {\n            background: white;\n            display: inline-block;\n            position: absolute;\n            right: 0;\n        }\n    }\n\n    .title:hover {\n        text-decoration: underline;\n    }\n\n    &.active>.title {\n        font-family: MAIN-EB;\n    }\n\n    .sub {\n        display: none;\n        padding-left: 16px;\n    }\n\n    &.active > .sub {\n        display: block;\n    }\n}\n\n\n.main-panel {\n    border: 1px solid #aaa;\n\n    .panel-header {\n        width: 100%;\n        border-bottom: 1px solid #aaa;\n    }\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.panel-editor {\n    i {\n        width: 14px;\n    }\n\n    span {\n        cursor: pointer;\n    }\n\n    .target-file:hover span.title {\n        border-bottom: 1px solid #000;\n    }\n}\n\n.info-form.row {\n    margin: 0;\n}","compile_css":"off","compile_html":"on","compile_js":"on"}]